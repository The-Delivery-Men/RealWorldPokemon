//fetch function for data
const fetchPokemonData = async (url, options = {}) => {
    try {
        const response = await fetch(url, options);

        if (!response.ok) {
            throw new Error(`Fetch failed. ${response.status} ${response.statusText}`)
        }

        const isJson = (response.headers.get('content-type') || '').includes('application/json')
        let data = isJson ? await response.json() : await response.text()
        console.log(data)
        return [data, null];
    }
    catch (error) {
        console.error(error.message);

        return [null, error];
    }
}


// JavaScript to handle button clicks and form submissions can go here
document.getElementById('menu-button').addEventListener('click', () => {
    alert('Menu button clicked');
});

document.getElementById('info-button').addEventListener('click', () => {
    alert('Info button clicked');
});

document.getElementById('about-devs-button').addEventListener('click', () => {
    alert('About the Devs button clicked');
});

// Mock dataset of Pokémon by continent
const pokemonData = {
    "Africa": ["Sandile", "Torterra", "Hippopotas"],
    "Asia": ["Pikachu", "Charmander", "Bulbasaur"],
    "Europe": ["Rattata", "Eevee", "Snorlax"],
    "North America": ["Squirtle", "Pidgey", "Jigglypuff"],
    "Oceania": ["Lapras", "Gyarados", "Kangaskhan"],
    "South America": ["Ludicolo", "Tropius", "Yanma"]
};



document.getElementById('enter-button').addEventListener('click', () => {
    const continent = document.getElementById('continent').value;
    const resultsDiv = document.getElementById('results');

    if (pokemonData[continent]) {
        resultsDiv.innerHTML = `<h2 aria-label="search-result-header" id="searchResultHeader">Pokémon in ${continent}:</h2><ul>` + pokemonData[continent].map(pokemon => `<li class='listed-pokemon'>${pokemon}</li>`).join('') + `</ul>`;




        // Add click event listeners to each listed Pokémon
        const listedPokemons = resultsDiv.querySelectorAll('.listed-pokemon');
        console.log(listedPokemons)
        listedPokemons.forEach(pokemonElement => {
            pokemonElement.addEventListener('click', () => {
                const pokemon = pokemonElement.textContent.toLowerCase()
                const url = `https://pokeapi.co/api/v2/pokemon/${pokemon}`

                fetchPokemonData(url);

            });
        });
    } else {
        resultsDiv.innerHTML = `<p>No Pokémon data available for ${continent}.</p>`;
    }
});









// <!-- Testing the fetch -->


async function testRoute(url) {
    const response = await fetch(url);
    const data = await response.json();
    console.log('data:', data);
}


const url1 = `https://pokeapi.co/api/v2/pokemon/ditto`;

testRoute(url1);

//creating a fetch function for pokemon types and testing it
const typeTest = () => {

    //defining a url variable which holds the url to a pokemon ground type database
    const urlGround = (`https://pokeapi.co/api/v2/type/5`);

    //returning a fetch promise
    return fetch(urlGround)
        //chaining .then promises 
        .then(response => {
            /*
            checking if the promise resolved, if not creating an error message to increase 
            error transparency to know how to debug (why it went wrong)
            */
            if (!response.ok) {
                throw new Error(`Error: ${response.status}`)
            }
            //when fetching from the given resource, the success default should be to return the response parsed with JSON
            return response.json();
            //taking the data or information within the response (information about ground types) and console logging all of ground type pokemon
        }).then(data => {
            console.log(data.pokemon)
            //returning it so the promise results in having a value to offer to another promise chained to this promise, if anything 
            return data.pokemon
        }).then(pokemon => {
            //returning a random pokemon of the ground type array by generating a number from 1 through 187 (representing the indexes of the object array the pokemon are held in)
            const randomNum = Math.ceil(Math.random() * 188)
            //returning the pokemon at the random given index generated by randomNum()
            console.log(pokemon[randomNum - 1])
        })
        //catching the error and throwing it back???
        .catch(error => {
            console.error('Could not fetch pokemon:', error);
            throw error; // Re-throw the error to ensure the promise is rejected?? I need more explanation 
        });


}

typeTest();



